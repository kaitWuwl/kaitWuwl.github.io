<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>MKの小窝 • Posts by &#34;mysql&#34; tag</title>
    <link href="http://example.com" />
    <updated>2023-09-27T09:46:56.000Z</updated>
    <category term="MySQL" />
    <category term="Spring" />
    <entry>
        <id>http://example.com/2023/09/27/MySQL%E5%AD%A6%E4%B9%A0/</id>
        <title>MySQL学习</title>
        <link rel="alternate" href="http://example.com/2023/09/27/MySQL%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h2 id=&#34;MySQL&#34;&gt;MySQL&lt;/h2&gt;
&lt;h3 id=&#34;SQL简介&#34;&gt;SQL简介&lt;/h3&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;英文：Structured Query Language，简称 SQL&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;结构化查询语言，一门操作关系型数据库的编程语言&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;定义操作所有关系型数据库的统一标准&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;对于同一个需求，每一种数据库操作的方式可能会存在一些不一样的地方，我们称为“方言”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h4 id=&#34;通用语法&#34;&gt;通用语法&lt;/h4&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;SQL 语句可以单行或多行书写，以分号结尾。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;注释&lt;/p&gt;
&lt;p&gt;单行注释: – 注释内容 或 #注释内容(MySQL 特有)&lt;/p&gt;
&lt;p&gt;多行注释：/* 注释内容 */&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;SQL语法分类&#34;&gt;SQL语法分类&lt;/h4&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;DDL(Data Definition Language) ： 数据定义语言，用来定义数据库对象：数据库，表，列等。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;DML(Data Manipulation Language) 数据操作语言，用来对数据库中表的数据进行增删改&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;DQL(Data Query Language) 数据查询语言，用来查询数据库中表的记录(数据)&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;DCL(Data Control Language) 数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;DDL学习&#34;&gt;DDL学习&lt;/h3&gt;
&lt;h4 id=&#34;DDL操作数据库&#34;&gt;DDL操作数据库&lt;/h4&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;查询所有数据库(SQL语言不区分大小写):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show databases;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;创建数据库:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;create database 数据库名称;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建数据库时，如果该名称的数据库已存在则会报错，所以创建数据库时先判断再创建。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;create database if not exists 数据库名称;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;删除数据库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;drop database 数据库名称;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除数据库（如果存在则删除）：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;drop database if exists 数据库名称;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;使用数据库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;use 数据库名称;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;查看当前使用的数据库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select database();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;数据类型&#34;&gt;数据类型&lt;/h4&gt;
&lt;p&gt;MySQL 支持多种类型，可以分为三类：&lt;/p&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;数值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;tinyint : 小整数型，占一个字节
int : 大整数类型，占四个字节
	eg ： age int
double : 浮点类型
	使用格式： 字段名 double(总长度,小数点后保留的位数)
	eg ： score double(5,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;日期&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;date ： 日期值，只包含年月日
	eg ：birthday date
datetime ： 混合日期和时间值，包含年月日时分秒
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;字符串&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;MySQL&#34;&gt;char ： 定长字符串
	优点：存储性能高 缺点：浪费空间
	eg ： name char(10) 如果存储的数据字符个数不足10个，也会占10个的空间
varchar ： 变长字符串
	优点：节约空间 缺点：存储性能低
	eg ： name varchar(10) 如果存储的数据字符个数不足10个，那就数据字符个数是几就占几个的空间
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;DDL操作表&#34;&gt;DDL操作表&lt;/h4&gt;
&lt;p&gt;操作表也就是对表进行增（Create）删（Retrieve）改（Update）查（Delete）。&lt;/p&gt;
&lt;h5 id=&#34;查询表&#34;&gt;查询表&lt;/h5&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;查询当前数据库所有表名称：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show tables;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;查询表结构：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;desc 表名称;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;创建表&#34;&gt;创建表&lt;/h5&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;创建表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;create datebase 表名 (
字段1 数据类型1，
字段2 数据类型2，
字段3 数据类型3，
......
);
例：
create datebase user (
    id int,
    username varchar(20),
    password varchar(32)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;删除表&#34;&gt;删除表&lt;/h5&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;删除表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;drop table 表名;
删除表时判断表是否存在：
drop table if exists 表名;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;修改表&#34;&gt;修改表&lt;/h5&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;修改表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;alter table 表名 add 列名 数据类型;
例：给stu表添加一列address，该字段类型时varchar(50)
alter table stu add address varchar(50);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;修改数据类型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;alter table 表名 modify 列名 新数据类型;
例：将stu表的address字段的数据类型修改为char(50)
alter table stu modify address char(50);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;修改列名和数据类型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;alter table 表名 change 列名 新列名 新数据类型;
例：将stu表的address字段名改为addr，数据类型修改为varchar(50)
alter table stu change address addr varchar(50);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;删除列：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;alter table 表名 drop 列名;
例：将stu表中的addr列删除
alter table stu drop addr;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;DML&#34;&gt;DML&lt;/h3&gt;
&lt;p&gt;DML主要是对数据进行增（insert）删（delete）改（update）操作。&lt;/p&gt;
&lt;h4 id=&#34;添加数据&#34;&gt;添加数据&lt;/h4&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;给指定列添加数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;insert into 表名(列名1，列名2，...)values(值1，值2，...);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;给全部列添加数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;insert into 表名 values(值1，值2，值3...);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;批量添加数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;insert into 表名(列名1，列名2，列名3...) values(值1，值2，值3...),(值1，值2，值3...),(值1，值2，值3...)...;
insert into 表名 values(值1，值2，值3...),(值1，值2，值3...),(值1，值2，值3...)...;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;修改数据&#34;&gt;修改数据&lt;/h4&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;修改表数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;update 表名 set 列名1=值1，列名2=值2，...[where 条件];
注意：
1. 修改语句中如果不加条件，则将所有数据都修改！
2. 像上面的语句中的中括号，表示在写sql语句中可以省略这部分
例：
将张三的性别改为女
update stu set sex=&#39;女&#39; where name=&#39;张三&#39;;
将张三的生日改为 1999-12-12 分数改为99.99
update stu set birthday=&#39;1999-12-12&#39;,score=99.99 where name=&#39;张三&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;删除数据&#34;&gt;删除数据&lt;/h4&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;删除数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;delete from 表名 [where 条件];
同上，不加条件会把整张表的数据删除。
例：
删除张三数据
delete from stu where name=&#39;张三&#39;;
删除整张表数据
delete from stu;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;DQL&#34;&gt;DQL&lt;/h3&gt;
&lt;p&gt;完整语法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;select 字段列表
from 表名列表
where 条件列表
group by 分组字段
having 分组后条件
order by 排序字段
limit 分页限定
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;基础查询&#34;&gt;基础查询&lt;/h4&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;查询多个字段&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;select 字段列表 from 表名;
查询所有数据
select * from 表名;
例：
查询name,age两列
select name,age from stu;
查询地址信息
select address from stu;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;去除重复记录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;select distinct from 表名;
例：
查询地址信息并去除重复数据
select distinct address from stu;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;起别名&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;as:
as也可以省略
例：
查询姓名、数学成绩、英语成绩。并通过as给math和english起别名（as关键字可以省略）
select name as 姓名,math as 数学成绩,english as 英语成绩 from stu;
省略as
select name 姓名,math 数学成绩,english 英语成绩 from stu;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;条件查询&#34;&gt;条件查询&lt;/h4&gt;
&lt;ul class=&#34;lvl-0&#34;&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select 字段列表 from 表名 where 条件列表&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;lvl-2&#34;&gt;
&lt;p&gt;条件&lt;/p&gt;
&lt;p&gt;条件列表可以使用以下运算符&lt;/p&gt;
&lt;img src=&#34;/.com//09/27/MySQL%E5%AD%A6%E4%B9%A0/image-20220921174012126.png&#34; class title=&#34;image-20220921174012126&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;UPPER函数&#34;&gt;UPPER函数&lt;/h4&gt;
&lt;p&gt;SQL UPPER 函数 以大写形式显示结构化查询语言中的所有字符串字符。它将小字符或一组小字符转换为大写字母。&lt;/p&gt;
&lt;p&gt;我们还可以对 SQL 表的字符串字段使用 UPPER 函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法1&lt;/strong&gt;：此语法将 UPPER 函数与 SQL 表的列名一起使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SELECT UPPER(Column_Name) AS Alias_Name FROM Table_Name;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在语法中，我们必须指定要在其上使用 UPPER 字符串函数的列名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法2&lt;/strong&gt;：此语法使用 UPPER 函数和一组小写字符（字符串）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SELECT UPPER(String);  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;语法3&lt;/strong&gt;：此语法使用带有单个小写字符的 UPPER 函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SELECT UPPER(lower_case_character);  
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;SQL执行流程&#34;&gt;SQL执行流程&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;注意sql语句的执行顺序： (1) FROM: 对FROM子句中的左表&lt;code&gt;&amp;lt;left_table&amp;gt;&lt;/code&gt;和右表&lt;code&gt;&amp;lt;right_table&amp;gt;&lt;/code&gt;执行笛卡儿积，产生虚拟表VT1;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(2) ON: 对虚拟表VT1进行ON筛选，只有那些符合&lt;code&gt;&amp;lt;join_condition&amp;gt;&lt;/code&gt;的行才被插入，产生虚拟表VT2;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(3) JOIN: 如果指定了&lt;code&gt;OUTER JOIN&lt;/code&gt;(如LEFT OUTER JOIN、RIGHT OUTER JOIN)，那么保留表中未匹配的行作为外部行添加到虚拟表VT2，产生虚拟表VT3。如果FROM子句包含两个以上的表，则对上一个连接生成的结果表VT3和下一个表重复执行步骤1~步骤3，直到处理完所有的表;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(4) WHERE: 对虚拟表VT3应用WHERE过滤条件，只有符合&lt;code&gt;&amp;lt;where_condition&amp;gt;&lt;/code&gt;的记录才会被插入到VT4;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(5) GROUP By: 根据GROUP BY子句中的列，对VT4中的记录进行分组操作，产生VT5;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(6) CUBE|ROllUP: 对VT5进行CUBE或ROLLUP操作，产生VT6;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(7) HAVING: 对虚拟表VT6应用HAVING过滤器，只有符合&lt;code&gt;&amp;lt;having_condition&amp;gt;&lt;/code&gt;的记录才会被插入到VT7;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(8) SELECT: 第二次执行SELECT操作，选择指定的列，插入到虚拟表VT8中;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(9) DISTINCT: 去除重复，得到虚拟表VT9;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(10) ORDER BY: 将虚拟表VT9中的记录按照&lt;code&gt;&amp;lt;order_by_list&amp;gt;&lt;/code&gt;进行排序操作，得到虚拟表VT10;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(11) LIMIT: 取出指定行的记录，产生虚拟表VT11，并返回给查询用户&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;CASE函数&#34;&gt;CASE函数&lt;/h3&gt;
&lt;p&gt;是一种多分支的函数，可以根据条件列表的值返回多个可能的结果表达式中的一个。可用在任何允许使用表达式的地方，但不能单独作为一个语句执行。分为：简单CASE函数搜索CASE函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;mysql&#34;&gt;CASE 测试表达式
WHEN 简单表达式1 THEN 结果表达式1
WHEN 简单表达式2 THEN 结果表达式2 …
WHEN 简单表达式n THEN 结果表达式n
[ ELSE 结果表达式n+1 ]
END
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;计算测试表达式，按从上到下的书写顺序将测试表达式的值与每个WHEN子句的简单表达式进行比较。如果某个简单表达式的值与测试表达式的值相等，则返回第一个与之匹配的WHEN子句所对应的结果表达式的值。如果所有简单表达式的值与测试表达式的值都不相等，若指定了ELSE子句,则返回ELSE子句中指定的结果表达式的值；若没有指定ELSE子句，则返回NULL。&lt;/p&gt;
&lt;p&gt;例48. 查询班级表中的学生的班号、班名、系号和班主任号，并对系号作如下处理：当系号为1时，显示 “计算机系”；当系号为2时，显示 “软件工程系”；当系号为3时，显示 “物联网系”。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;MySQL&#34;&gt;SELECT 班号 ,班名,
CASE 系号
WHEN 1 THEN &#39;软件工程系&#39;
WHEN 2 THEN &#39;计算机系&#39;
WHEN 3 THEN &#39;物联网系&#39;
END AS 系号,班主任号
FROM 班级表
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;搜索CASE函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;MySQL&#34;&gt;CASE
WHEN 布尔表达式1 THEN 结果表达式1
WHEN 布尔表达式2 THEN 结果表达式2 …
WHEN 布尔表达式n THEN 结果表达式n
[ ELSE 结果表达式n+1 ]
END
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按从上到下的书写顺序计算每个WHEN子句的布尔表达式。返回第一个取值为TRUE的布尔表达式所对应的结果表达式的值。如果没有取值为TRUE的布尔表达式，则当指定了ELSE子句时,返回ELSE子句中指定的结果；如果没有指定ELSE子句，则返回NULL。&lt;/p&gt;
&lt;p&gt;例48用搜索CASE来做：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;MySQL&#34;&gt;SELECT 班号 ,班名,
CASE
WHEN 系号=1 THEN &#39;软件工程系&#39;
WHEN 系号=2 THEN &#39;计算机系&#39;
WHEN 系号=3 THEN &#39;物联网系&#39;
END AS 系号,班主任号
FROM 班级表
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例49.查询“M01F011”号课程的考试情况，列出学号、课程号和成绩，同时将百分制成绩显示为等级。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;MySQL&#34;&gt;SELECT 学号,课程号,
CASE
WHEN 成绩 &amp;gt;= 90 THEN &#39;优&#39;
WHEN 成绩 BETWEEN 80 AND 89 THEN &#39;良&#39;
WHEN 成绩 BETWEEN 70 AND 79 THEN &#39;中&#39;
WHEN 成绩 BETWEEN 60 AND 69 THEN &#39;及格&#39;
WHEN 成绩 &amp;lt;60 THEN &#39;不及格&#39;
END 成绩
FROM 成绩表
WHERE 课程号 = &#39;M01F011&#39;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="MySQL" />
        <updated>2023-09-27T09:46:56.000Z</updated>
    </entry>
</feed>
