{
    "version": "https://jsonfeed.org/version/1",
    "title": "MKの小窝 • All posts by \"mysql\" tag",
    "description": "记录平凡生活",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/09/27/MySQL%E5%AD%A6%E4%B9%A0/",
            "url": "http://example.com/2023/09/27/MySQL%E5%AD%A6%E4%B9%A0/",
            "title": "MySQL学习",
            "date_published": "2023-09-27T09:46:56.000Z",
            "content_html": "<h2 id=\"mysql\"><a class=\"markdownIt-Anchor\" href=\"#mysql\">#</a> MySQL</h2>\n<h3 id=\"sql简介\"><a class=\"markdownIt-Anchor\" href=\"#sql简介\">#</a> SQL 简介</h3>\n<ul>\n<li>英文：Structured Query Language，简称 SQL</li>\n<li>结构化查询语言，一门操作关系型数据库的编程语言</li>\n<li>定义操作所有关系型数据库的统一标准</li>\n<li>对于同一个需求，每一种数据库操作的方式可能会存在一些不一样的地方，我们称为 “方言”</li>\n</ul>\n<span id=\"more\"></span>\n<h4 id=\"通用语法\"><a class=\"markdownIt-Anchor\" href=\"#通用语法\">#</a> 通用语法</h4>\n<ul>\n<li>\n<p>SQL 语句可以单行或多行书写，以分号结尾。</p>\n</li>\n<li>\n<p>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</p>\n</li>\n<li>\n<p>注释</p>\n<p>单行注释: – 注释内容 或 #注释内容 (MySQL 特有)</p>\n<p>多行注释：/* 注释内容 */</p>\n</li>\n</ul>\n<h4 id=\"sql语法分类\"><a class=\"markdownIt-Anchor\" href=\"#sql语法分类\">#</a> SQL 语法分类</h4>\n<ul>\n<li>DDL (Data Definition Language) ： 数据定义语言，用来定义数据库对象：数据库，表，列等。</li>\n<li>DML (Data Manipulation Language) 数据操作语言，用来对数据库中表的数据进行增删改</li>\n<li>DQL (Data Query Language) 数据查询语言，用来查询数据库中表的记录 (数据)</li>\n<li>DCL (Data Control Language) 数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户</li>\n</ul>\n<h3 id=\"ddl学习\"><a class=\"markdownIt-Anchor\" href=\"#ddl学习\">#</a> DDL 学习</h3>\n<h4 id=\"ddl操作数据库\"><a class=\"markdownIt-Anchor\" href=\"#ddl操作数据库\">#</a> DDL 操作数据库</h4>\n<ul>\n<li>\n<p>查询所有数据库 (SQL 语言不区分大小写):</p>\n<p><code>show databases;</code></p>\n</li>\n<li>\n<p>创建数据库:</p>\n<p><code>create database 数据库名称;</code></p>\n<p>创建数据库时，如果该名称的数据库已存在则会报错，所以创建数据库时先判断再创建。</p>\n<p><code>create database if not exists 数据库名称;</code></p>\n</li>\n<li>\n<p>删除数据库：</p>\n<p><code>drop database 数据库名称;</code></p>\n<p>删除数据库（如果存在则删除）：</p>\n<p><code>drop database if exists 数据库名称;</code></p>\n</li>\n<li>\n<p>使用数据库：</p>\n<p><code>use 数据库名称;</code></p>\n</li>\n<li>\n<p>查看当前使用的数据库：</p>\n<p><code>select database();</code></p>\n</li>\n</ul>\n<h4 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h4>\n<p>MySQL 支持多种类型，可以分为三类：</p>\n<ul>\n<li>\n<p>数值</p>\n<pre><code class=\"language-mysql\">tinyint : 小整数型，占一个字节\nint : 大整数类型，占四个字节\n\teg ： age int\ndouble : 浮点类型\n\t使用格式： 字段名 double(总长度,小数点后保留的位数)\n\teg ： score double(5,2)\n</code></pre>\n</li>\n<li>\n<p>日期</p>\n<pre><code class=\"language-mysql\">date ： 日期值，只包含年月日\n\teg ：birthday date\ndatetime ： 混合日期和时间值，包含年月日时分秒\n</code></pre>\n</li>\n<li>\n<p>字符串</p>\n<pre><code class=\"language-MySQL\">char ： 定长字符串\n\t优点：存储性能高 缺点：浪费空间\n\teg ： name char(10) 如果存储的数据字符个数不足10个，也会占10个的空间\nvarchar ： 变长字符串\n\t优点：节约空间 缺点：存储性能低\n\teg ： name varchar(10) 如果存储的数据字符个数不足10个，那就数据字符个数是几就占几个的空间\n</code></pre>\n</li>\n</ul>\n<h4 id=\"ddl操作表\"><a class=\"markdownIt-Anchor\" href=\"#ddl操作表\">#</a> DDL 操作表</h4>\n<p>操作表也就是对表进行增（Create）删（Retrieve）改（Update）查（Delete）。</p>\n<h5 id=\"查询表\"><a class=\"markdownIt-Anchor\" href=\"#查询表\">#</a> 查询表</h5>\n<ul>\n<li>\n<p>查询当前数据库所有表名称：</p>\n<p><code>show tables;</code></p>\n</li>\n<li>\n<p>查询表结构：</p>\n<p><code>desc 表名称;</code></p>\n</li>\n</ul>\n<h5 id=\"创建表\"><a class=\"markdownIt-Anchor\" href=\"#创建表\">#</a> 创建表</h5>\n<ul>\n<li>\n<p>创建表：</p>\n<pre><code class=\"language-mysql\">create datebase 表名 (\n字段1 数据类型1，\n字段2 数据类型2，\n字段3 数据类型3，\n......\n);\n例：\ncreate datebase user (\n    id int,\n    username varchar(20),\n    password varchar(32)\n);\n</code></pre>\n</li>\n</ul>\n<h5 id=\"删除表\"><a class=\"markdownIt-Anchor\" href=\"#删除表\">#</a> 删除表</h5>\n<ul>\n<li>\n<p>删除表：</p>\n<pre><code class=\"language-mysql\">drop table 表名;\n删除表时判断表是否存在：\ndrop table if exists 表名;\n</code></pre>\n</li>\n</ul>\n<h5 id=\"修改表\"><a class=\"markdownIt-Anchor\" href=\"#修改表\">#</a> 修改表</h5>\n<ul>\n<li>\n<p>修改表：</p>\n<pre><code class=\"language-mysql\">alter table 表名 add 列名 数据类型;\n例：给stu表添加一列address，该字段类型时varchar(50)\nalter table stu add address varchar(50);\n</code></pre>\n</li>\n<li>\n<p>修改数据类型：</p>\n<pre><code class=\"language-mysql\">alter table 表名 modify 列名 新数据类型;\n例：将stu表的address字段的数据类型修改为char(50)\nalter table stu modify address char(50);\n</code></pre>\n</li>\n<li>\n<p>修改列名和数据类型：</p>\n<pre><code class=\"language-mysql\">alter table 表名 change 列名 新列名 新数据类型;\n例：将stu表的address字段名改为addr，数据类型修改为varchar(50)\nalter table stu change address addr varchar(50);\n</code></pre>\n</li>\n<li>\n<p>删除列：</p>\n<pre><code class=\"language-mysql\">alter table 表名 drop 列名;\n例：将stu表中的addr列删除\nalter table stu drop addr;\n</code></pre>\n</li>\n</ul>\n<h3 id=\"dml\"><a class=\"markdownIt-Anchor\" href=\"#dml\">#</a> DML</h3>\n<p>DML 主要是对数据进行增（insert）删（delete）改（update）操作。</p>\n<h4 id=\"添加数据\"><a class=\"markdownIt-Anchor\" href=\"#添加数据\">#</a> 添加数据</h4>\n<ul>\n<li>\n<p>给指定列添加数据：</p>\n<pre><code class=\"language-mysql\">insert into 表名(列名1，列名2，...)values(值1，值2，...);\n</code></pre>\n</li>\n<li>\n<p>给全部列添加数据：</p>\n<pre><code class=\"language-mysql\">insert into 表名 values(值1，值2，值3...);\n</code></pre>\n</li>\n<li>\n<p>批量添加数据：</p>\n<pre><code class=\"language-mysql\">insert into 表名(列名1，列名2，列名3...) values(值1，值2，值3...),(值1，值2，值3...),(值1，值2，值3...)...;\ninsert into 表名 values(值1，值2，值3...),(值1，值2，值3...),(值1，值2，值3...)...;\n</code></pre>\n</li>\n</ul>\n<h4 id=\"修改数据\"><a class=\"markdownIt-Anchor\" href=\"#修改数据\">#</a> 修改数据</h4>\n<ul>\n<li>\n<p>修改表数据：</p>\n<pre><code class=\"language-mysql\">update 表名 set 列名1=值1，列名2=值2，...[where 条件];\n注意：\n1. 修改语句中如果不加条件，则将所有数据都修改！\n2. 像上面的语句中的中括号，表示在写sql语句中可以省略这部分\n例：\n将张三的性别改为女\nupdate stu set sex='女' where name='张三';\n将张三的生日改为 1999-12-12 分数改为99.99\nupdate stu set birthday='1999-12-12',score=99.99 where name='张三';\n</code></pre>\n</li>\n</ul>\n<h4 id=\"删除数据\"><a class=\"markdownIt-Anchor\" href=\"#删除数据\">#</a> 删除数据</h4>\n<ul>\n<li>\n<p>删除数据：</p>\n<pre><code class=\"language-mysql\">delete from 表名 [where 条件];\n同上，不加条件会把整张表的数据删除。\n例：\n删除张三数据\ndelete from stu where name='张三';\n删除整张表数据\ndelete from stu;\n</code></pre>\n</li>\n</ul>\n<h3 id=\"dql\"><a class=\"markdownIt-Anchor\" href=\"#dql\">#</a> DQL</h3>\n<p>完整语法：</p>\n<pre><code class=\"language-mysql\">select 字段列表\nfrom 表名列表\nwhere 条件列表\ngroup by 分组字段\nhaving 分组后条件\norder by 排序字段\nlimit 分页限定\n</code></pre>\n<h4 id=\"基础查询\"><a class=\"markdownIt-Anchor\" href=\"#基础查询\">#</a> 基础查询</h4>\n<ul>\n<li>\n<p>查询多个字段</p>\n<pre><code class=\"language-mysql\">select 字段列表 from 表名;\n查询所有数据\nselect * from 表名;\n例：\n查询name,age两列\nselect name,age from stu;\n查询地址信息\nselect address from stu;\n</code></pre>\n</li>\n<li>\n<p>去除重复记录</p>\n<pre><code class=\"language-mysql\">select distinct from 表名;\n例：\n查询地址信息并去除重复数据\nselect distinct address from stu;\n</code></pre>\n</li>\n<li>\n<p>起别名</p>\n<pre><code class=\"language-mysql\">as:\nas也可以省略\n例：\n查询姓名、数学成绩、英语成绩。并通过as给math和english起别名（as关键字可以省略）\nselect name as 姓名,math as 数学成绩,english as 英语成绩 from stu;\n省略as\nselect name 姓名,math 数学成绩,english 英语成绩 from stu;\n</code></pre>\n</li>\n</ul>\n<h4 id=\"条件查询\"><a class=\"markdownIt-Anchor\" href=\"#条件查询\">#</a> 条件查询</h4>\n<ul>\n<li>\n<p><strong>语法</strong></p>\n<p><code>select 字段列表 from 表名 where 条件列表</code> ；</p>\n</li>\n<li>\n<p>条件</p>\n<p>条件列表可以使用以下运算符</p>\n\n</li>\n</ul>\n<h4 id=\"upper函数\"><a class=\"markdownIt-Anchor\" href=\"#upper函数\">#</a> UPPER 函数</h4>\n<p>SQL UPPER 函数 以大写形式显示结构化查询语言中的所有字符串字符。它将小字符或一组小字符转换为大写字母。</p>\n<p>我们还可以对 SQL 表的字符串字段使用 UPPER 函数。</p>\n<p><strong>语法 1</strong>：此语法将 UPPER 函数与 SQL 表的列名一起使用：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> UPPER<span class=\"token punctuation\">(</span>Column_Name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> Alias_Name <span class=\"token keyword\">FROM</span> Table_Name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在语法中，我们必须指定要在其上使用 UPPER 字符串函数的列名。</p>\n<p><strong>语法 2</strong>：此语法使用 UPPER 函数和一组小写字符（字符串）：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> UPPER<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>语法 3</strong>：此语法使用带有单个小写字符的 UPPER 函数：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> UPPER<span class=\"token punctuation\">(</span>lower_case_character<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"sql执行流程\"><a class=\"markdownIt-Anchor\" href=\"#sql执行流程\">#</a> SQL 执行流程</h4>\n<blockquote>\n<p>注意 sql 语句的执行顺序： (1) FROM: 对 FROM 子句中的左表 <code>&lt;left_table&gt;</code>  和右表 <code>&lt;right_table&gt;</code>  执行笛卡儿积，产生虚拟表 VT1;</p>\n</blockquote>\n<blockquote>\n<p>(2) ON: 对虚拟表 VT1 进行 ON 筛选，只有那些符合 <code>&lt;join_condition&gt;</code>  的行才被插入，产生虚拟表 VT2;</p>\n</blockquote>\n<blockquote>\n<p>(3) JOIN: 如果指定了 <code>OUTER JOIN</code>  (如 LEFT OUTER JOIN、RIGHT OUTER JOIN)，那么保留表中未匹配的行作为外部行添加到虚拟表 VT2，产生虚拟表 VT3。如果 FROM 子句包含两个以上的表，则对上一个连接生成的结果表 VT3 和下一个表重复执行步骤 1~ 步骤 3，直到处理完所有的表；</p>\n</blockquote>\n<blockquote>\n<p>(4) WHERE: 对虚拟表 VT3 应用 WHERE 过滤条件，只有符合 <code>&lt;where_condition&gt;</code>  的记录才会被插入到 VT4;</p>\n</blockquote>\n<blockquote>\n<p>(5) GROUP By: 根据 GROUP BY 子句中的列，对 VT4 中的记录进行分组操作，产生 VT5;</p>\n</blockquote>\n<blockquote>\n<p>(6) CUBE|ROllUP: 对 VT5 进行 CUBE 或 ROLLUP 操作，产生 VT6;</p>\n</blockquote>\n<blockquote>\n<p>(7) HAVING: 对虚拟表 VT6 应用 HAVING 过滤器，只有符合 <code>&lt;having_condition&gt;</code>  的记录才会被插入到 VT7;</p>\n</blockquote>\n<blockquote>\n<p>(8) SELECT: 第二次执行 SELECT 操作，选择指定的列，插入到虚拟表 VT8 中；</p>\n</blockquote>\n<blockquote>\n<p>(9) DISTINCT: 去除重复，得到虚拟表 VT9;</p>\n</blockquote>\n<blockquote>\n<p>(10) ORDER BY: 将虚拟表 VT9 中的记录按照 <code>&lt;order_by_list&gt;</code>  进行排序操作，得到虚拟表 VT10;</p>\n</blockquote>\n<blockquote>\n<p>(11) LIMIT: 取出指定行的记录，产生虚拟表 VT11，并返回给查询用户</p>\n</blockquote>\n<h3 id=\"case函数\"><a class=\"markdownIt-Anchor\" href=\"#case函数\">#</a> CASE 函数</h3>\n<p>是一种多分支的函数，可以根据条件列表的值返回多个可能的结果表达式中的一个。<br>\n可用在任何允许使用表达式的地方，但不能单独作为一个语句执行。<br>\n分为：<br>\n简单 CASE 函数<br>\n搜索 CASE 函数</p>\n<pre><code class=\"language-mysql\">CASE 测试表达式\nWHEN 简单表达式1 THEN 结果表达式1\nWHEN 简单表达式2 THEN 结果表达式2 …\nWHEN 简单表达式n THEN 结果表达式n\n[ ELSE 结果表达式n+1 ]\nEND\n</code></pre>\n<p>计算测试表达式，按从上到下的书写顺序将测试表达式的值与每个 WHEN 子句的简单表达式进行比较。<br>\n如果某个简单表达式的值与测试表达式的值相等，则返回第一个与之匹配的 WHEN 子句所对应的结果表达式的值。<br>\n如果所有简单表达式的值与测试表达式的值都不相等，<br>\n若指定了 ELSE 子句，则返回 ELSE 子句中指定的结果表达式的值；<br>\n若没有指定 ELSE 子句，则返回 NULL。</p>\n<p>例 48. 查询班级表中的学生的班号、班名、系号和班主任号，并对系号作如下处理：<br>\n当系号为 1 时，显示 “计算机系”；<br>\n当系号为 2 时，显示 “软件工程系”；<br>\n当系号为 3 时，显示 “物联网系”。</p>\n<pre><code class=\"language-MySQL\">SELECT 班号 ,班名,\nCASE 系号\nWHEN 1 THEN '软件工程系'\nWHEN 2 THEN '计算机系'\nWHEN 3 THEN '物联网系'\nEND AS 系号,班主任号\nFROM 班级表\n</code></pre>\n<p>搜索 CASE 函数</p>\n<pre><code class=\"language-MySQL\">CASE\nWHEN 布尔表达式1 THEN 结果表达式1\nWHEN 布尔表达式2 THEN 结果表达式2 …\nWHEN 布尔表达式n THEN 结果表达式n\n[ ELSE 结果表达式n+1 ]\nEND\n</code></pre>\n<p>按从上到下的书写顺序计算每个 WHEN 子句的布尔表达式。<br>\n返回第一个取值为 TRUE 的布尔表达式所对应的结果表达式的值。<br>\n如果没有取值为 TRUE 的布尔表达式，<br>\n则当指定了 ELSE 子句时，返回 ELSE 子句中指定的结果；<br>\n如果没有指定 ELSE 子句，则返回 NULL。</p>\n<p>例 48 用搜索 CASE 来做：</p>\n<pre><code class=\"language-MySQL\">SELECT 班号 ,班名,\nCASE\nWHEN 系号=1 THEN '软件工程系'\nWHEN 系号=2 THEN '计算机系'\nWHEN 系号=3 THEN '物联网系'\nEND AS 系号,班主任号\nFROM 班级表\n</code></pre>\n<p>例 49. 查询 “M01F011” 号课程的考试情况，列出学号、课程号和成绩，同时将百分制成绩显示为等级。</p>\n<pre><code class=\"language-MySQL\">SELECT 学号,课程号,\nCASE\nWHEN 成绩 &gt;= 90 THEN '优'\nWHEN 成绩 BETWEEN 80 AND 89 THEN '良'\nWHEN 成绩 BETWEEN 70 AND 79 THEN '中'\nWHEN 成绩 BETWEEN 60 AND 69 THEN '及格'\nWHEN 成绩 &lt;60 THEN '不及格'\nEND 成绩\nFROM 成绩表\nWHERE 课程号 = 'M01F011'\n</code></pre>\n",
            "tags": [
                "MySQL"
            ]
        }
    ]
}